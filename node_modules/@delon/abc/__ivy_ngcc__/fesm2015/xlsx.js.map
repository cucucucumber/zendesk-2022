{"version":3,"file":"xlsx.js","sources":["../../../../packages/abc/xlsx/xlsx.service.ts","../../../../packages/abc/xlsx/xlsx.directive.ts","../../../../packages/abc/xlsx/xlsx.module.ts","../../../../packages/abc/xlsx/xlsx.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable, NgZone } from '@angular/core';\n\nimport isUtf8 from 'isutf8';\n\nimport { AlainConfigService, AlainXlsxConfig } from '@delon/util/config';\nimport { ZoneOutside } from '@delon/util/decorator';\nimport { LazyResult, LazyService } from '@delon/util/other';\nimport type { NzSafeAny } from 'ng-zorro-antd/core/types';\n\nimport { XlsxExportOptions, XlsxExportResult, XlsxExportSheet } from './xlsx.types';\n\ndeclare var XLSX: NzSafeAny;\ndeclare var cptable: NzSafeAny;\n\n@Injectable({ providedIn: 'root' })\nexport class XlsxService {\n  constructor(\n    private http: HttpClient,\n    private lazy: LazyService,\n    configSrv: AlainConfigService,\n    private ngZone: NgZone\n  ) {\n    this.cog = configSrv.merge('xlsx', {\n      url: 'https://cdn.bootcdn.net/ajax/libs/xlsx/0.16.8/xlsx.full.min.js',\n      modules: [`https://cdn.bootcdn.net/ajax/libs/xlsx/0.16.8/cpexcel.min.js`]\n    })!;\n  }\n  private cog: AlainXlsxConfig;\n\n  private init(): Promise<LazyResult[]> {\n    return typeof XLSX !== 'undefined'\n      ? Promise.resolve([])\n      : this.lazy.load([this.cog.url!].concat(this.cog.modules!));\n  }\n\n  @ZoneOutside()\n  private read(data: NzSafeAny): { [key: string]: NzSafeAny[][] } {\n    const {\n      read,\n      utils: { sheet_to_json }\n    } = XLSX;\n    const ret: NzSafeAny = {};\n    const buf = new Uint8Array(data);\n    let type = 'array';\n    if (!isUtf8(buf)) {\n      try {\n        data = cptable.utils.decode(936, buf);\n        type = 'string';\n      } catch {}\n    }\n    const wb = read(data, { type });\n    wb.SheetNames.forEach((name: string) => {\n      const sheet: NzSafeAny = wb.Sheets[name];\n      ret[name] = sheet_to_json(sheet, { header: 1 });\n    });\n    return ret;\n  }\n\n  /**\n   * 导入Excel并输出JSON，支持 `<input type=\"file\">`、URL 形式\n   */\n  import(fileOrUrl: File | string): Promise<{ [key: string]: NzSafeAny[][] }> {\n    return new Promise<{ [key: string]: NzSafeAny[][] }>((resolve, reject) => {\n      const r = (data: NzSafeAny): void => this.ngZone.run(() => resolve(this.read(data)));\n      this.init()\n        .then(() => {\n          // from url\n          if (typeof fileOrUrl === 'string') {\n            this.http.request('GET', fileOrUrl, { responseType: 'arraybuffer' }).subscribe(\n              (res: ArrayBuffer) => r(new Uint8Array(res)),\n              (err: NzSafeAny) => reject(err)\n            );\n            return;\n          }\n          // from file\n          const reader: FileReader = new FileReader();\n          reader.onload = (e: NzSafeAny) => r(e.target.result);\n          reader.onerror = (e: NzSafeAny) => reject(e);\n          reader.readAsArrayBuffer(fileOrUrl);\n        })\n        .catch(() => reject(`Unable to load xlsx.js`));\n    });\n  }\n\n  @ZoneOutside()\n  async export(options: XlsxExportOptions): Promise<XlsxExportResult> {\n    return new Promise<XlsxExportResult>((resolve, reject) => {\n      this.init()\n        .then(() => {\n          options = { format: 'xlsx', ...options };\n          const {\n            writeFile,\n            utils: { book_new, aoa_to_sheet, book_append_sheet }\n          } = XLSX;\n          const wb: NzSafeAny = book_new();\n          if (Array.isArray(options.sheets)) {\n            (options.sheets as XlsxExportSheet[]).forEach((value: XlsxExportSheet, index: number) => {\n              const ws: NzSafeAny = aoa_to_sheet(value.data);\n              book_append_sheet(wb, ws, value.name || `Sheet${index + 1}`);\n            });\n          } else {\n            wb.SheetNames = Object.keys(options.sheets);\n            wb.Sheets = options.sheets;\n          }\n\n          if (options.callback) options.callback(wb);\n\n          const filename = options.filename || `export.${options.format}`;\n          writeFile(wb, filename, {\n            bookType: options.format,\n            bookSST: false,\n            type: 'array',\n            ...options.opts\n          });\n\n          resolve({ filename, wb });\n        })\n        .catch(err => reject(err));\n    });\n  }\n\n  /**\n   * 数据转符号名\n   * - `1` => `A`\n   * - `27` => `AA`\n   * - `703` => `AAA`\n   */\n  numberToSchema(val: number): string {\n    const startCode = 'A'.charCodeAt(0);\n    let res = '';\n\n    do {\n      --val;\n      res = String.fromCharCode(startCode + (val % 26)) + res;\n      val = (val / 26) >> 0;\n    } while (val > 0);\n\n    return res;\n  }\n}\n","import { Directive, Input } from '@angular/core';\n\nimport { XlsxService } from './xlsx.service';\nimport { XlsxExportOptions } from './xlsx.types';\n\n@Directive({\n  selector: '[xlsx]',\n  exportAs: 'xlsx',\n  host: {\n    '(click)': '_click()'\n  }\n})\nexport class XlsxDirective {\n  @Input('xlsx') data: XlsxExportOptions;\n\n  constructor(private srv: XlsxService) {}\n\n  _click(): void {\n    this.srv.export(this.data);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { XlsxDirective } from './xlsx.directive';\n\nconst COMPONENTS = [XlsxDirective];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: COMPONENTS,\n  exports: COMPONENTS\n})\nexport class XlsxModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}